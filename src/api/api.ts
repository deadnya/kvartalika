/* tslint:disable */
/* eslint-disable */
/**
 * Kvartalica API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CategoryRequest
 */
export interface CategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoryRequest
     */
    'categoryName': string;
}
/**
 * 
 * @export
 * @interface ContentManagerRequest
 */
export interface ContentManagerRequest {
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'patronymic'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentManagerRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface DescriptionRequest
 */
export interface DescriptionRequest {
    /**
     * 
     * @type {string}
     * @memberof DescriptionRequest
     */
    'descriptionText': string;
}
/**
 * 
 * @export
 * @interface FlatRequest
 */
export interface FlatRequest {
    /**
     * 
     * @type {number}
     * @memberof FlatRequest
     */
    'homeId': number;
    /**
     * 
     * @type {string}
     * @memberof FlatRequest
     */
    'flatName'?: string;
    /**
     * 
     * @type {number}
     * @memberof FlatRequest
     */
    'flatValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof FlatRequest
     */
    'amountOfRooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof FlatRequest
     */
    'flatFloor'?: number;
    /**
     * 
     * @type {string}
     * @memberof FlatRequest
     */
    'placementOfFlat'?: string;
    /**
     * 
     * @type {number}
     * @memberof FlatRequest
     */
    'amountOfBathrooms'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FlatRequest
     */
    'isDecorated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FlatRequest
     */
    'area'?: string;
}
/**
 * 
 * @export
 * @interface FooterRequest
 */
export interface FooterRequest {
    /**
     * 
     * @type {string}
     * @memberof FooterRequest
     */
    'companyName': string;
    /**
     * 
     * @type {string}
     * @memberof FooterRequest
     */
    'placementOfSelling'?: string;
    /**
     * 
     * @type {string}
     * @memberof FooterRequest
     */
    'companyPhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof FooterRequest
     */
    'companyEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof FooterRequest
     */
    'socialLinks'?: string;
}
/**
 * 
 * @export
 * @interface HomeRequest
 */
export interface HomeRequest {
    /**
     * 
     * @type {number}
     * @memberof HomeRequest
     */
    'categoryId': number;
    /**
     * 
     * @type {string}
     * @memberof HomeRequest
     */
    'homeAddress'?: string;
    /**
     * 
     * @type {number}
     * @memberof HomeRequest
     */
    'yearBuilt'?: number;
    /**
     * 
     * @type {number}
     * @memberof HomeRequest
     */
    'totalFloors'?: number;
    /**
     * 
     * @type {string}
     * @memberof HomeRequest
     */
    'ownerId'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PhotoRequest
 */
export interface PhotoRequest {
    /**
     * 
     * @type {string}
     * @memberof PhotoRequest
     */
    'altText'?: string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'patronymic'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RequestCreate
 */
export interface RequestCreate {
    /**
     * 
     * @type {string}
     * @memberof RequestCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RequestCreate
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof RequestCreate
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RequestCreate
     */
    'phone': string;
}
/**
 * 
 * @export
 * @interface RequestsPost201Response
 */
export interface RequestsPost201Response {
    /**
     * 
     * @type {number}
     * @memberof RequestsPost201Response
     */
    'id'?: number;
}
/**
 * 
 * @export
 * @interface SearchRequest
 */
export interface SearchRequest {
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    'categoryId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    'minValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    'maxValue'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    'minRooms'?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchRequest
     */
    'maxRooms'?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Удалить контент-менеджера
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminContentManagersDelete', 'id', id)
            const localVarPath = `/admin/content-managers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication admin_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить всех контент-менеджеров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/content-managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication admin_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать контент-менеджера
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersPost: async (contentManagerRequest: ContentManagerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentManagerRequest' is not null or undefined
            assertParamExists('adminContentManagersPost', 'contentManagerRequest', contentManagerRequest)
            const localVarPath = `/admin/content-managers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication admin_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentManagerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить контент-менеджера
         * @param {string} id 
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersPut: async (id: string, contentManagerRequest: ContentManagerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminContentManagersPut', 'id', id)
            // verify required parameter 'contentManagerRequest' is not null or undefined
            assertParamExists('adminContentManagersPut', 'contentManagerRequest', contentManagerRequest)
            const localVarPath = `/admin/content-managers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication admin_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentManagerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Вход администратора
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('adminLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Регистрация администратора
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRegisterPost: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('adminRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/admin/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Первичная настройка администратора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetupPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список категорий
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить категорию
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentCategoriesDelete', 'id', id)
            const localVarPath = `/content/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать категорию
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesPost: async (categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('contentCategoriesPost', 'categoryRequest', categoryRequest)
            const localVarPath = `/content/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить категорию
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesPut: async (id: number, categoryRequest: CategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentCategoriesPut', 'id', id)
            // verify required parameter 'categoryRequest' is not null or undefined
            assertParamExists('contentCategoriesPut', 'categoryRequest', categoryRequest)
            const localVarPath = `/content/categories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить описание
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentDescriptionsDelete', 'id', id)
            const localVarPath = `/content/descriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать описание
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsPost: async (descriptionRequest: DescriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'descriptionRequest' is not null or undefined
            assertParamExists('contentDescriptionsPost', 'descriptionRequest', descriptionRequest)
            const localVarPath = `/content/descriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(descriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить описание
         * @param {number} id 
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsPut: async (id: number, descriptionRequest: DescriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentDescriptionsPut', 'id', id)
            // verify required parameter 'descriptionRequest' is not null or undefined
            assertParamExists('contentDescriptionsPut', 'descriptionRequest', descriptionRequest)
            const localVarPath = `/content/descriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(descriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить квартиру
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentFlatsDelete', 'id', id)
            const localVarPath = `/content/flats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать квартиру
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsPost: async (flatRequest: FlatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flatRequest' is not null or undefined
            assertParamExists('contentFlatsPost', 'flatRequest', flatRequest)
            const localVarPath = `/content/flats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить квартиру
         * @param {number} id 
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsPut: async (id: number, flatRequest: FlatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentFlatsPut', 'id', id)
            // verify required parameter 'flatRequest' is not null or undefined
            assertParamExists('contentFlatsPut', 'flatRequest', flatRequest)
            const localVarPath = `/content/flats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать футер
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFooterPost: async (footerRequest: FooterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'footerRequest' is not null or undefined
            assertParamExists('contentFooterPost', 'footerRequest', footerRequest)
            const localVarPath = `/content/footer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(footerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить футер
         * @param {number} id 
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFooterPut: async (id: number, footerRequest: FooterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentFooterPut', 'id', id)
            // verify required parameter 'footerRequest' is not null or undefined
            assertParamExists('contentFooterPut', 'footerRequest', footerRequest)
            const localVarPath = `/content/footer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(footerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить дом
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentHomesDelete', 'id', id)
            const localVarPath = `/content/homes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать дом
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesPost: async (homeRequest: HomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homeRequest' is not null or undefined
            assertParamExists('contentHomesPost', 'homeRequest', homeRequest)
            const localVarPath = `/content/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить дом
         * @param {number} id 
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesPut: async (id: number, homeRequest: HomeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentHomesPut', 'id', id)
            // verify required parameter 'homeRequest' is not null or undefined
            assertParamExists('contentHomesPut', 'homeRequest', homeRequest)
            const localVarPath = `/content/homes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Вход контент-менеджера
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentManagerLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('contentManagerLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/content-manager/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Регистрация контент-менеджера
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentManagerRegisterPost: async (registerRequest: RegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('contentManagerRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/content-manager/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Удалить фото
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentPhotosDelete', 'id', id)
            const localVarPath = `/content/photos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать фото
         * @param {File} photo Файл изображения
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosPost: async (photo: File, altText?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'photo' is not null or undefined
            assertParamExists('contentPhotosPost', 'photo', photo)
            const localVarPath = `/content/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
            if (altText !== undefined) { 
                localVarFormParams.append('altText', altText as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Обновить фото
         * @param {number} id 
         * @param {File} [photo] Файл изображения (опционально)
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosPut: async (id: number, photo?: File, altText?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentPhotosPut', 'id', id)
            const localVarPath = `/content/photos`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication content_jwt required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (photo !== undefined) { 
                localVarFormParams.append('photo', photo as any);
            }
    
            if (altText !== undefined) { 
                localVarFormParams.append('altText', altText as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список описаний
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/descriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список квартир
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/flats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить футер
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        footerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/footer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список домов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/homes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить список фото
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/photos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Создать заявку
         * @param {RequestCreate} requestCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsPost: async (requestCreate: RequestCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestCreate' is not null or undefined
            assertParamExists('requestsPost', 'requestCreate', requestCreate)
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Поиск домов
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost: async (searchRequest: SearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('searchPost', 'searchRequest', searchRequest)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Удалить контент-менеджера
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminContentManagersDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminContentManagersDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminContentManagersDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить всех контент-менеджеров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminContentManagersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminContentManagersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminContentManagersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать контент-менеджера
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminContentManagersPost(contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminContentManagersPost(contentManagerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminContentManagersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить контент-менеджера
         * @param {string} id 
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminContentManagersPut(id: string, contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminContentManagersPut(id, contentManagerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminContentManagersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Вход администратора
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Регистрация администратора
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Первичная настройка администратора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminSetupPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminSetupPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.adminSetupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список категорий
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.categoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить категорию
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCategoriesDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentCategoriesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentCategoriesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать категорию
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCategoriesPost(categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentCategoriesPost(categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentCategoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить категорию
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCategoriesPut(id: number, categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentCategoriesPut(id, categoryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentCategoriesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить описание
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDescriptionsDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentDescriptionsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentDescriptionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать описание
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDescriptionsPost(descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentDescriptionsPost(descriptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentDescriptionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить описание
         * @param {number} id 
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDescriptionsPut(id: number, descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentDescriptionsPut(id, descriptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentDescriptionsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить квартиру
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFlatsDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentFlatsDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentFlatsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать квартиру
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFlatsPost(flatRequest: FlatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentFlatsPost(flatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentFlatsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить квартиру
         * @param {number} id 
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFlatsPut(id: number, flatRequest: FlatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentFlatsPut(id, flatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentFlatsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать футер
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFooterPost(footerRequest: FooterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentFooterPost(footerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentFooterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить футер
         * @param {number} id 
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFooterPut(id: number, footerRequest: FooterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentFooterPut(id, footerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentFooterPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить дом
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentHomesDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentHomesDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentHomesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать дом
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentHomesPost(homeRequest: HomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentHomesPost(homeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentHomesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить дом
         * @param {number} id 
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentHomesPut(id: number, homeRequest: HomeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentHomesPut(id, homeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentHomesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Вход контент-менеджера
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentManagerLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentManagerLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentManagerLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Регистрация контент-менеджера
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentManagerRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentManagerRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentManagerRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Удалить фото
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentPhotosDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentPhotosDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentPhotosDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать фото
         * @param {File} photo Файл изображения
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentPhotosPost(photo: File, altText?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentPhotosPost(photo, altText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentPhotosPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Обновить фото
         * @param {number} id 
         * @param {File} [photo] Файл изображения (опционально)
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentPhotosPut(id: number, photo?: File, altText?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentPhotosPut(id, photo, altText, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.contentPhotosPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список описаний
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async descriptionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.descriptionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.descriptionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список квартир
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.flatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.flatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить футер
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async footerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.footerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.footerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список домов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async homesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.homesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.homesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить список фото
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.photosGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Создать заявку
         * @param {RequestCreate} requestCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsPost(requestCreate: RequestCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsPost(requestCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.requestsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Поиск домов
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPost(searchRequest: SearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPost(searchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.searchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Удалить контент-менеджера
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminContentManagersDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить всех контент-менеджеров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminContentManagersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать контент-менеджера
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersPost(contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminContentManagersPost(contentManagerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить контент-менеджера
         * @param {string} id 
         * @param {ContentManagerRequest} contentManagerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminContentManagersPut(id: string, contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminContentManagersPut(id, contentManagerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Вход администратора
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Регистрация администратора
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Первичная настройка администратора
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminSetupPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminSetupPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список категорий
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.categoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить категорию
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentCategoriesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать категорию
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesPost(categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentCategoriesPost(categoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить категорию
         * @param {number} id 
         * @param {CategoryRequest} categoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCategoriesPut(id: number, categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentCategoriesPut(id, categoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить описание
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentDescriptionsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать описание
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsPost(descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentDescriptionsPost(descriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить описание
         * @param {number} id 
         * @param {DescriptionRequest} descriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDescriptionsPut(id: number, descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentDescriptionsPut(id, descriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить квартиру
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentFlatsDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать квартиру
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsPost(flatRequest: FlatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentFlatsPost(flatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить квартиру
         * @param {number} id 
         * @param {FlatRequest} flatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFlatsPut(id: number, flatRequest: FlatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentFlatsPut(id, flatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать футер
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFooterPost(footerRequest: FooterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentFooterPost(footerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить футер
         * @param {number} id 
         * @param {FooterRequest} footerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFooterPut(id: number, footerRequest: FooterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentFooterPut(id, footerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить дом
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentHomesDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать дом
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesPost(homeRequest: HomeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentHomesPost(homeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить дом
         * @param {number} id 
         * @param {HomeRequest} homeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentHomesPut(id: number, homeRequest: HomeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentHomesPut(id, homeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Вход контент-менеджера
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentManagerLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentManagerLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Регистрация контент-менеджера
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentManagerRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentManagerRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Удалить фото
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentPhotosDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать фото
         * @param {File} photo Файл изображения
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosPost(photo: File, altText?: string, options?: RawAxiosRequestConfig): AxiosPromise<RequestsPost201Response> {
            return localVarFp.contentPhotosPost(photo, altText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Обновить фото
         * @param {number} id 
         * @param {File} [photo] Файл изображения (опционально)
         * @param {string} [altText] Альтернативный текст для изображения
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentPhotosPut(id: number, photo?: File, altText?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentPhotosPut(id, photo, altText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список описаний
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        descriptionsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.descriptionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список квартир
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flatsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.flatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить футер
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        footerGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.footerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список домов
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        homesGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.homesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить список фото
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.photosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Создать заявку
         * @param {RequestCreate} requestCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsPost(requestCreate: RequestCreate, options?: RawAxiosRequestConfig): AxiosPromise<RequestsPost201Response> {
            return localVarFp.requestsPost(requestCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Поиск домов
         * @param {SearchRequest} searchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost(searchRequest: SearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchPost(searchRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Удалить контент-менеджера
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminContentManagersDelete(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminContentManagersDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить всех контент-менеджеров
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminContentManagersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminContentManagersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать контент-менеджера
     * @param {ContentManagerRequest} contentManagerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminContentManagersPost(contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminContentManagersPost(contentManagerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить контент-менеджера
     * @param {string} id 
     * @param {ContentManagerRequest} contentManagerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminContentManagersPut(id: string, contentManagerRequest: ContentManagerRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminContentManagersPut(id, contentManagerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Вход администратора
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Регистрация администратора
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Первичная настройка администратора
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public adminSetupPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).adminSetupPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список категорий
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public categoriesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).categoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить категорию
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentCategoriesDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentCategoriesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать категорию
     * @param {CategoryRequest} categoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentCategoriesPost(categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentCategoriesPost(categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить категорию
     * @param {number} id 
     * @param {CategoryRequest} categoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentCategoriesPut(id: number, categoryRequest: CategoryRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentCategoriesPut(id, categoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить описание
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentDescriptionsDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentDescriptionsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать описание
     * @param {DescriptionRequest} descriptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentDescriptionsPost(descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentDescriptionsPost(descriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить описание
     * @param {number} id 
     * @param {DescriptionRequest} descriptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentDescriptionsPut(id: number, descriptionRequest: DescriptionRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentDescriptionsPut(id, descriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить квартиру
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentFlatsDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentFlatsDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать квартиру
     * @param {FlatRequest} flatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentFlatsPost(flatRequest: FlatRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentFlatsPost(flatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить квартиру
     * @param {number} id 
     * @param {FlatRequest} flatRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentFlatsPut(id: number, flatRequest: FlatRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentFlatsPut(id, flatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать футер
     * @param {FooterRequest} footerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentFooterPost(footerRequest: FooterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentFooterPost(footerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить футер
     * @param {number} id 
     * @param {FooterRequest} footerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentFooterPut(id: number, footerRequest: FooterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentFooterPut(id, footerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить дом
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentHomesDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentHomesDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать дом
     * @param {HomeRequest} homeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentHomesPost(homeRequest: HomeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentHomesPost(homeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить дом
     * @param {number} id 
     * @param {HomeRequest} homeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentHomesPut(id: number, homeRequest: HomeRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentHomesPut(id, homeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Вход контент-менеджера
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentManagerLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentManagerLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Регистрация контент-менеджера
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentManagerRegisterPost(registerRequest: RegisterRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentManagerRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Удалить фото
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentPhotosDelete(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentPhotosDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать фото
     * @param {File} photo Файл изображения
     * @param {string} [altText] Альтернативный текст для изображения
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentPhotosPost(photo: File, altText?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentPhotosPost(photo, altText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Обновить фото
     * @param {number} id 
     * @param {File} [photo] Файл изображения (опционально)
     * @param {string} [altText] Альтернативный текст для изображения
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public contentPhotosPut(id: number, photo?: File, altText?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).contentPhotosPut(id, photo, altText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список описаний
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public descriptionsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).descriptionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список квартир
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public flatsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).flatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить футер
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public footerGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).footerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список домов
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public homesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).homesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить список фото
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public photosGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).photosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Создать заявку
     * @param {RequestCreate} requestCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public requestsPost(requestCreate: RequestCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).requestsPost(requestCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Поиск домов
     * @param {SearchRequest} searchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchPost(searchRequest: SearchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).searchPost(searchRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



