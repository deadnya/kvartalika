import { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useAppStore } from '../store/useAppStore';
import { useAuthStore } from '../store/useAuthStore';
import ContentManager from '../components/ContentManager';

const ApartmentPage = () => {
  const { apartmentId } = useParams<{ apartmentId: string }>();
  const { 
    apartments, 
    setSelectedApartment, 
    setShowBookingModal
  } = useAppStore();
  const { user, isAuthenticated } = useAuthStore();
  
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [showContentManager, setShowContentManager] = useState(false);
  
  // Find the apartment by ID
  const apartment = apartments.find(apt => apt.id === Number(apartmentId));
  
  useEffect(() => {
    if (apartment) {
      setSelectedApartment(apartment);
    }
  }, [apartment, setSelectedApartment]);

  if (!apartment) {
    return (
      <div className="min-h-screen pt-20 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            –ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          </h1>
          <Link
            to="/"
            className="text-blue-600 hover:text-blue-700 font-medium"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Link>
        </div>
      </div>
    );
  }

  const handleBookingClick = () => {
    setShowBookingModal(true);
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU').format(price);
  };

  const pricePerSqm = Math.round(apartment.price / apartment.area);

  // Mock images for gallery (in real app would come from apartment.images)
  const images = apartment.images || [
    apartment.image || '/images/apartment-placeholder.jpg',
    '/images/apartment-2.jpg',
    '/images/apartment-3.jpg',
    '/images/apartment-4.jpg'
  ];

  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % images.length);
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);
  };

  return (
    <div className="min-h-screen pt-20">
      {/* Breadcrumbs */}
      <section className="bg-gray-50 py-4">
        <div className="container mx-auto px-4">
          <nav className="text-sm">
            <Link to="/" className="text-blue-600 hover:text-blue-700">
              –ì–ª–∞–≤–Ω–∞—è
            </Link>
            <span className="mx-2 text-gray-400">‚Ä∫</span>
            <Link 
              to={`/complex/${encodeURIComponent(apartment.complex)}`}
              className="text-blue-600 hover:text-blue-700"
            >
              {apartment.complex}
            </Link>
            <span className="mx-2 text-gray-400">‚Ä∫</span>
            <span className="text-gray-600">
              {apartment.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞
            </span>
          </nav>
        </div>
      </section>

      <div className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Images and Details */}
          <div className="lg:col-span-2">
            {/* Image Gallery */}
            <div className="mb-8">
              <div className="relative h-96 rounded-xl overflow-hidden bg-gray-200">
                <img
                  src={images[currentImageIndex]}
                  alt={`${apartment.rooms}-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞`}
                  className="w-full h-full object-cover"
                />
                
                {/* Hot Deal Badge */}
                {apartment.isHot && (
                  <div className="absolute top-4 left-4 bg-red-500 text-white px-3 py-2 rounded-lg font-semibold">
                    üî• –ì–æ—Ä—è—á–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                  </div>
                )}

                {/* Navigation Arrows */}
                {images.length > 1 && (
                  <>
                    <button
                      onClick={prevImage}
                      className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                      </svg>
                    </button>
                    <button
                      onClick={nextImage}
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all"
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                      </svg>
                    </button>
                  </>
                )}

                {/* Image Counter */}
                <div className="absolute bottom-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-lg text-sm">
                  {currentImageIndex + 1} / {images.length}
                </div>
              </div>

              {/* Thumbnail Gallery */}
              {images.length > 1 && (
                <div className="flex space-x-2 mt-4 overflow-x-auto">
                  {images.map((image, index) => (
                    <button
                      key={index}
                      onClick={() => setCurrentImageIndex(index)}
                      className={`flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden border-2 transition-all ${
                        index === currentImageIndex
                          ? 'border-blue-500'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <img
                        src={image}
                        alt={`–§–æ—Ç–æ ${index + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </button>
                  ))}
                </div>
              )}
            </div>

            {/* Apartment Layout */}
            {apartment.layout && (
              <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-6">
                  –ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
                </h2>
                <div className="flex justify-center">
                  <img
                    src={apartment.layout}
                    alt="–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"
                    className="max-w-full h-auto rounded-lg border border-gray-200"
                  />
                </div>
              </div>
            )}

            {/* Apartment Details */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">
                –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-4">
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–ö–æ–º–Ω–∞—Ç:</span>
                    <span className="font-medium">{apartment.rooms}</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å:</span>
                    <span className="font-medium">{apartment.area} –º¬≤</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–≠—Ç–∞–∂:</span>
                    <span className="font-medium">{apartment.floor}</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–°–∞–Ω—É–∑–µ–ª:</span>
                    <span className="font-medium">{apartment.bathroom}</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞–Ω—É–∑–ª–æ–≤:</span>
                    <span className="font-medium">{apartment.bathrooms}</span>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–û—Ç–¥–µ–ª–∫–∞:</span>
                    <span className="font-medium">{apartment.finishing}</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ –º¬≤:</span>
                    <span className="font-medium">{formatPrice(pricePerSqm)} ‚ÇΩ/–º¬≤</span>
                  </div>
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å:</span>
                    <Link
                      to={`/complex/${encodeURIComponent(apartment.complex)}`}
                      className="font-medium text-blue-600 hover:text-blue-700"
                    >
                      {apartment.complex}
                    </Link>
                  </div>
                  {/* Address */}
                  <div className="flex justify-between py-3 border-b border-gray-200">
                    <span className="text-gray-600">–ê–¥—Ä–µ—Å:</span>
                    <span className="font-medium">{apartment.address}</span>
                  </div>
                </div>
              </div>

              {/* Description */}
              {apartment.description && (
                <div className="mt-8">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    –û–ø–∏—Å–∞–Ω–∏–µ
                  </h3>
                  <p className="text-gray-600 leading-relaxed">
                    {apartment.description}
                  </p>
                </div>
              )}

              {/* Features */}
              <div className="mt-8">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-center text-gray-600">
                    <svg className="w-5 h-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞
                  </div>
                  <div className="flex items-center text-gray-600">
                    <svg className="w-5 h-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    –í—ã—Å–æ–∫–∏–µ –ø–æ—Ç–æ–ª–∫–∏
                  </div>
                  <div className="flex items-center text-gray-600">
                    <svg className="w-5 h-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    –ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è
                  </div>
                  <div className="flex items-center text-gray-600">
                    <svg className="w-5 h-5 text-green-500 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ
                  </div>
                </div>
              </div>
            </div>

            {/* Location Section */}
            <div className="mt-8">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</h3>
              <div className="bg-gray-100 rounded-xl p-8 text-center mb-8">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <h4 className="text-lg font-semibold text-gray-900 mb-2">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</h4>
                <p className="text-gray-600 mb-4">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∞ —Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—ã</p>
                <p className="text-sm text-gray-500">üìç {apartment.address}</p>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                  <h4 className="text-lg font-semibold text-gray-900 mb-4">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</h4>
                  <ul className="space-y-3 text-gray-600">
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                      </svg>
                      –ú–µ—Ç—Ä–æ "–ü—Ä–∏–º–µ—Ä–Ω–∞—è" - 5 –º–∏–Ω –ø–µ—à–∫–æ–º
                    </li>
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      –ê–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - 2 –º–∏–Ω –ø–µ—à–∫–æ–º
                    </li>
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-purple-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                      </svg>
                      –î–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ - 15 –º–∏–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
                    </li>
                  </ul>
                </div>
                <div>
                  <h4 className="text-lg font-semibold text-gray-900 mb-4">–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–π–æ–Ω–∞</h4>
                  <ul className="space-y-3 text-gray-600">
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-red-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                      </svg>
                      –®–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
                    </li>
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                      </svg>
                      –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –º–∞–≥–∞–∑–∏–Ω—ã
                    </li>
                    <li className="flex items-center">
                      <svg className="w-5 h-5 text-yellow-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 1.343-3 3s1.343 3 3 3 3-1.343 3-3-1.343-3-3-3zm0 0V4m0 8v8" />
                      </svg>
                      –ü–∞—Ä–∫–∏ –∏ –∑–æ–Ω—ã –æ—Ç–¥—ã—Ö–∞
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Price and Booking */}
          <div className="lg:col-span-1">
            <div className="sticky top-24">
              {/* Price Card */}
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div className="text-center mb-6">
                  <div className="text-3xl font-bold text-gray-900 mb-2">
                    {formatPrice(apartment.price)} ‚ÇΩ
                  </div>
                  <div className="text-sm text-gray-600">
                    {formatPrice(pricePerSqm)} ‚ÇΩ –∑–∞ –º¬≤
                  </div>
                </div>

                <div className="space-y-4 mb-6">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å:</span>
                    <span className="font-medium">{apartment.area} –º¬≤</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">–ö–æ–º–Ω–∞—Ç:</span>
                    <span className="font-medium">{apartment.rooms}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">–≠—Ç–∞–∂:</span>
                    <span className="font-medium">{apartment.floor}</span>
                  </div>
                </div>

                <button
                  onClick={handleBookingClick}
                  className="w-full bg-blue-600 text-white py-4 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors mb-4"
                >
                  –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–º–æ—Ç—Ä
                </button>

                {/* Content Manager Edit Button */}
                {isAuthenticated && user?.role === 'CM' && (
                  <button
                    onClick={() => setShowContentManager(true)}
                    className="w-full bg-gray-600 text-white py-3 rounded-lg font-semibold text-base hover:bg-gray-700 transition-colors"
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                  </button>
                )}


              </div>


            </div>
          </div>
        </div>


      </div>

      {/* Content Manager Modal */}
      {showContentManager && (
        <ContentManager
          contentType="apartment"
          contentId={apartment.id}
          initialData={apartment}
          onSave={(updatedData) => {
            // Update the apartment data in the store
            // This would typically update the store state
            setShowContentManager(false);
            // Reload the page or update the data
            window.location.reload();
          }}
          onCancel={() => setShowContentManager(false)}
        />
      )}
    </div>
  );
};

export default ApartmentPage;